https://leetcode.cn/problems/minimum-path-sum/
### 解题思路
看完题目描述确定好使用动态规划来解题。
解题步骤是按卡哥的解题顺序来的
先确定好数组的含义：dp[i][j]表示到达(i,j)坐标位置的路径数字最小和。
确定递推公式：到某一个点的最短路径应该是由该点的上方或左方来的，如果是从下或右方来的说明多走了几步。这时候只要看从左和上来的哪个小，哪个就是更优路径。
所以递推公式就是：dp[i][j] = Math.min(dp[i][j-1] , dp[i-1][j])
初始化：dp[0][j]和dp[i][0]这些点的到达方法只有一种就是一些向下或向右，所以到达这些位置的路径就是固定的了。
确定遍历顺序：我使用的解法是使用的二维数组，所以从左到右和从上到下的顺序是可以随意的，无论哪个先哪个后遍历到该点时其左边的位置和上面的位置都已计算好了。

### 代码

```java
class Solution {
    public int minPathSum(int[][] grid) {
        int l1 = grid.length;
        int l2 = grid[0].length;

        int[][] dp = new int[l1][l2];
        //初始化
        dp[0][0] = grid[0][0];
        for(int i=1;i<l1;i++){
            dp[i][0] = dp[i-1][0]+grid[i][0];
        }
        for(int j=1;j<l2;j++){
            dp[0][j] = dp[0][j-1] + grid[0][j];
        }

        for(int i=1;i <l1;i++){
            for(int j=1;j <l2;j++){
                dp[i][j] = Math.min(dp[i-1][j],dp[i][j-1]) + grid[i][j];
            }
        }

        return dp[l1-1][l2-1];
    }
}
```
